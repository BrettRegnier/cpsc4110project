#include "Interface.h"

Interface:: Interface()
{
}

int Interface:: main_option()
{
   cout << " Select an Option" << endl;
   cout << "1. Controlled-NOT " << endl;
   cout << "2. Toffoli Gate " << endl;
   cout << "3. Deutsch's Algorithm " << endl;

   cin >> option;
   return option;
}

int Interface:: get_option()
{
   return option;
}
ComplexMatrix Interface::qubit_input(ComplexMatrix a, int input)
{
   ComplexMatrix temp = a;
   if(input ==1)
      temp[1][0] = 1;
   else
      temp[0][0] = 1;
   return temp;
   
}
ComplexMatrix Interface:: ControlNOT_function()
{
   ComplexMatrix control_bit= ComplexMatrix(2,1);
   ComplexNumber target_bit= ComplexMatrix(2,1);
   int input1;
   int input2;
   cout << "Input the control bit" << endl;
   cin>> input1;
   control_bit= qubit_input(control_bit, input1);

   cout << "Input the target bit" <<endl;
   cin>>input2;
   target_bit = qubit_input(target_bit, input2);

   ComplexMatrix tensor = ComplexMatrix(4,1);
   tensor= control_bit.TensorProduct(target_bit);

   ComplexMatrix result= ComplexMatrix(4,1);
   result= CNOT(tensor);

   return result;
   ComplexMatrix control_bit= ComplexMatrix(2,1);
   ComplexNumber target_bit= ComplexMatrix(2,1);
   int input1;
   int input2;
   cout << "Input the control bit" << endl;
   cin>> input1;
   control_bit= qubit_input(control_bit, input1);
   
   cout << "Input the target bit" <<endl;
   cin>>input2;
   target_bit = qubit_input(target_bit, input2);
   
   ComplexMatrix tensor = ComplexMatrix(4,1);
   tensor= control_bit.TensorProduct(target_bit);

   ComplexMatrix result= ComplexMatrix(4,1);
   result= CNOT(tensor);

   return result;
   
}
ComplexMatrix Interface:: Toffoli_gate()
{

}

ComplexVector Interface :: parsing(string input)
{
    
      
}

